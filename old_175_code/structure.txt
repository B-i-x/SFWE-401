a list of structs of cards 

create a list
fill the list
shuffle the list of cards

player draws 5 cards

typedef struct node_s {
int x;
struct node_s* next;
} node;

void print_list(node* pt) { //prints the entire list 
	while (pt != NULL) {
		printf("%d ", pt->x);
		pt = pt->next;
	}
}int main(void) {
	node* headp = NULL, * temp, * tail = NULL;
	int i;
	for (i = 0; i < 10; i++) {
		//allocate a memory for one node and make temp point to it. 
		temp = (node*)malloc(sizeof(node));
		//assign value i to the x member of temp
		temp->x = i;
		if (headp == NULL) { //make headp point to the location that temp points to 
			headp = temp;
		}
		else {
			tail->next = temp;//make next pointer member of tail point to temp
		}
		tail = temp;// updating tail
		tail->next = NULL;// setting next pt. of tail to null.
	}

	print_list(headp);
	return 0;
}

  //deleteMember(&deck_headp, &decktail, 13, 'C');

  void deleteMember(card **h, card **t, int given_face, char given_suit){
  card *targetp= *h; // pointer to card to be deleted
  card *prev = *h; // namepointer to the head of the list
  while (targetp != NULL) {
    if (targetp->face != given_face && targetp->suit != given_suit) {
      targetp = targetp->next;
    }
    else {
      break;
    }
  }
  if (targetp == NULL) {
    return;
  }
  else {
    if (targetp == *h) {// if first card is to be deleted
      *h = targetp->next;
      } // update headp
    else {
      while ( prev->next != targetp)
      prev = prev->next; // find the card before the target card
      if (targetp == *t) { // if last card is to be deleted
      *t = prev;// update the tail
      (*t)->next = NULL;
      }
      else {
      prev->next = targetp->next; // skip card to be deleted
      }
  free(targetp); // free the memory
    }
  }
}



/*
void delete_first_node(card **head) {
  card *tmp;

  //Linked list does not exist or the list is empty
  if(head == NULL || *head == NULL) return;
  
  //toring the head to a temporary variable
  tmp = *head;
  
  //Moving head to the next node
  *head = (*head)->next;
  
  //Deleting the first node
  free(tmp);
}*/
